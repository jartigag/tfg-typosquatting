0c0
////
// notes for myself start with //
////
< # CHANGELOG:
< # *v20180623:
< #	- single arg: --output['cli', 'csv', 'json', 'idle' (without any DNS checks)]
< # *v20180528:
< #	- step of progress % decreased
< #	- increased coverage of the homoglyph fuzzing function (experimental)
< #	- http, https, https-www, ww, www variatns to the dictionary
< #	- new chars in homoglyph fuzzer
< #	- changed validation of generated domains
< #	- changed format for whois queries (.split(' ')[0])
< #	- improved hyphenation fuzzer to generate multi-hyphenated domains
< #	- idn encoded in csv and json output
< #	- reorganized help screen
< #	- minor fixes
< # *v0.4b (20161123):
< #	- new options: --all, --nameservers, --port
< #	- other fixes
< #
211c175
< 					raise ValueError('Invalid domain name.')
---
> 					raise ValueError('Invalid domain name.' + self.domain) #diff: + self.domain
229d192
< 
281c244,245
< 		if len(domain) == len(domain.encode('idna')) and domain != domain.encode('idna'):
---
> 		#diff: validación simplificada
> 		if len(domain) > 255:
283,284c247,252
< 		allowed = re.compile('(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\.)+[a-zA-Z]{2,63}\.?$)', re.IGNORECASE)
< 		return allowed.match(domain.encode('idna'))
---
> 		if domain[-1] == '.':
> 			domain = domain[:-1]
> 		if len(domain) < len(domain.encode('idna')):
> 			return True
> 		allowed = re.compile('\A([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}\Z', re.IGNORECASE)
> 		return allowed.match(domain)
342c309,310
< 		result_1pass = set()
---
> 		#diff: result en vez de result_1pass,result_2pass
> 		result = []
381c333,334
< 			result.append(self.domain[:i] + '-' + self.domain[i:])
---
> 			if self.domain[i] not in ['-', '.'] and self.domain[i-1] not in ['-', '.']:
> 				result.append(self.domain[:i] + '-' + self.domain[i:])
492a446,448
> 		#diff: añadidos TLDs y not startswith('www.')
> 		for toplevdom in ['it', 'es', 'uk', 'net', 'co', 'edu', 'org', 'int', 'se', 'de', 'fr', 'gov', 'mil']:
> 			self.domains.append({ 'fuzzer': 'TLD', 'domain-name': self.domain + '.' + toplevdom })
499a462,472
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.es')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.it')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.net')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.co')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.uk')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.org')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.int')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.edu')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.gov')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.mil')})
> 		#self.domains.append({ 'fuzzer': 'Various', 'domain-name': self.domain.replace('.com', '.fr')})
502c475,478
< 
---
> 		
> 		# PRINT DOMAINS DIRECTLY
> 		for d in self.domains: #diff: print dominios codificados según el estándar idna
> 			print(d.get('domain-name').encode('idna'))
541d516
< 
637c612
< 				if 'dns-ns' in domain or len(domain['domain-name'].split('.')) > 1:
---
> 				if 'dns-ns' in domain: #diff: elminado "or len(domain['domain-name'].split('.')) > 1:"
678,679c653,654
< 						domain['whois-created'] = str(whoisdb.creation_date).split(' ')[0]
< 						domain['whois-updated'] = str(whoisdb.last_updated).split(' ')[0]
---
> 						domain['whois-created'] = str(whoisdb.creation_date).replace(' ', 'T') #diff: sustituido ".split(' ')[0]"
> 						domain['whois-updated'] = str(whoisdb.last_updated).replace(' ', 'T') #diff: sustituido ".split(' ')[0]"
730d704
< 
732,735c706,737
< 	json_domains = domains
< 	for domain in json_domains:
< 		domain['domain-name'] = domain['domain-name'].lower().encode('idna')
< 		domain['fuzzer'] = domain['fuzzer'].lower()
---
> 	#diff: mejoradas las opciones de formato
> 	formatted_domains = []
> 	if args.all:
> 		for domain in domains:
> 			formatted_domain = dict(dns=dict())
> 			formatted_domain['name'] = domain['domain-name'].lower().encode('idna')
> 			formatted_domain['fuzzer'] = domain['fuzzer'].lower()
> 
> 			if 'dns-a' in domain:
> 				formatted_domain['dns']['a'] = domain['dns-a']
> 			if 'dns-aaaa' in domain:
> 				formatted_domain['dns']['aaaa'] = domain['dns-aaaa']
> 			if 'dns-mx' in domain:
> 				formatted_domain['dns']['mx'] = domain['dns-mx']
> 			if 'dns-mxspy' in domain:
> 				formatted_domain['dns']['mxspy'] = domain['dns-mxspy']
> 			if 'dns-ns' in domain:
> 				formatted_domain['dns']['ns'] = domain['dns-ns']
> 			if 'geoip-country' in domain:
> 				formatted_domain['geoip'] = dict(country=domain['geoip-country'])
> 			if 'whois-created' in domain and 'whois-updated' in domain:
> 				domain['whois'] = dict(created=domain['whois-created'], updated=domain['whois-updated'])
> 			if 'ssdeep-score' in domain:
> 				formatted_domain['ssdeep_score'] = domain['ssdeep-score']
> 			if 'banner-http' in domain or 'banner-smtp' in domain:
> 				formatted_domain["banners"] = dict()
> 				if 'banner-http' in domain:
> 					formatted_domain['banners']['http'] = domain['banner-http']
> 				if 'banner-smtp' in domain:
> 					formatted_domain['banners']['smtp'] = domain['banner-smtp']
> 
> 			formatted_domains.append(formatted_domain)
737c739,749
< 	return json.dumps(json_domains, indent=4, sort_keys=True)
---
> 	else:
> 		formatted_domains = domains
> 		for domain in formatted_domains:
> 			if 'dns-a' in domain:
> 				domain['dns-a'] = domain['dns-a'][0]
> 			if 'dns-aaaaa' in domain:
> 				domain['dns-aaaa'] = domain['dns-aaaa'][0]
> 			if 'dns-mx' in domain:
> 				domain['dns-mx'] = domain['dns-mx'][0]
> 			if 'dns-ns' in domain:
> 				domain['dns-ns'] = domain['dns-ns'][0]
739a752,753
> 	return json.dumps(formatted_domains, indent=4, sort_keys=True)
> 
757,766d770
< 
< def generate_idle(domains):
< 	output = ''
< 
< 	for domain in domains:
< 		output += '%s\n' % domain.get('domain-name').encode('idna')
< 
< 	return output
< 
<
837a841
> 	parser.add_argument('-c', '--csv', action='store_true', help='print output in CSV format')
839a844
> 	parser.add_argument('-j', '--json', action='store_true', help='print output in JSON format')
841d845
< 	parser.add_argument('-f', '--format', type=str, choices=['cli', 'csv', 'json', 'idle'], default='cli', help='output format (default: cli)')
878,882c887
< 
< 	if args.format == 'idle':
< 		sys.stdout.write(generate_idle(domains))
< 		bye(0)
< 
---
> 	exit()
983c983
< 		if qcurr - 15 >= qperc:
---
> 		if qcurr - 20 >= qperc:
